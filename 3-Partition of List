Partition of List
Problem
Submissions
Leaderboard
Discussions
Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.
Input Format

The first line of each test case or query contains the elements of the singly linked list separated by a single space.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element.

Second line X value

Constraints

Time:- 1Sec
Output Format

Partion list as given
Sample Input 0

1 4 3 2 5 2 -1
3
Sample Output 0

1 2 2 4 3 5
Sample Input 1

2 1 -1
2
Sample Output 1

1 2


++++++++++++++++++++++++++++++++++++++++++++++++++++



import java.io.*;
import java.util.*;
class Node 
{
    int val;
    Node next;
    Node(int val) 
    {
        this.val = val;
        this.next = null;
    }
}
public class Solution 
{
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        Node dummyHead = new Node(0);
        Node current = dummyHead;
        while (true) 
        {
            int value = sc.nextInt();
            if (value == -1) 
            {
                break;
            }
            current.next = new Node(value);
            current = current.next;
        }
        Node head = dummyHead.next;
        int x = sc.nextInt();
        Node lessHead = new Node(0);
        Node greaterHead = new Node(0);
        Node less = lessHead, greater = greaterHead;
        while (head != null) 
        {
            if (head.val < x) 
            {
                less.next = head;
                less = less.next;
            } 
            else 
            {
                greater.next = head;
                greater = greater.next;
            }
            head = head.next;
        }
        less.next = greaterHead.next;
        greater.next = null;
        Node result = lessHead.next;
        while (result != null) 
        {
            System.out.print(result.val + " ");
            result = result.next;
        }
    }
}
