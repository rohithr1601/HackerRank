Given an encoded string, return its decoded string.
The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.
You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].
The test cases are generated so that the length of the output will never exceed 10^5.
Input Format

String S

Constraints

1 <= s.length <= 30
s consists of lowercase English letters, digits, and square brackets '[]'.
s is guaranteed to be a valid input.
All the integers in s are in the range [1, 300].
Output Format

Return its decoded string.
Sample Input 0

3[a]2[bc]
Sample Output 0

aaabcbc
Sample Input 1

3[a2[c]]
Sample Output 1

accaccacc



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
         Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        sc.close();

        System.out.println(decodeString(s));
    }

    public static String decodeString(String s) {
        Stack<String> str = new Stack<>();
        Stack<Integer> c = new Stack<>();
        StringBuilder cur = new StringBuilder();
        int currentCount = 0;

        for (char ch : s.toCharArray()) {
            if (Character.isDigit(ch)) {
                currentCount = currentCount * 10 + (ch - '0');
            } else if (ch == '[') {
                str.push(cur.toString());
                c.push(currentCount);
                cur = new StringBuilder();
                currentCount = 0;
            } else if (ch == ']') {
                StringBuilder t = new StringBuilder(str.pop());
                int repeatCount = c.pop();
                for (int i = 0; i < repeatCount; i++) {
                    t.append(cur);
                }
                cur = t;
            } else {
                cur.append(ch);
            }
        }

        return cur.toString();
    }
}
