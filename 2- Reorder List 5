Reorder List 5
Problem
Submissions
Leaderboard
Discussions
You are given the head of a singly linked-list. The list can be represented as:
L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:
L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.
Input Format

The first line of each test case or query contains the elements of the singly linked list separated by a single space.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element.
Constraints

Time: 1 Sec
Output Format

Print the reorder of the list
Sample Input 0

1 2 3 4 -1
Sample Output 0

1 4 2 3
Sample Input 1

1 2 3 4 5 -1
Sample Output 1

1 5 2 4 3





+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




import java.io.*;
import java.util.*;
class Node 
{
    int val;
    Node next;
    Node(int val) 
    {
        this.val = val;
        this.next = null;
    }
}
public class Solution
{
    public static void reorder(Node head) 
    {
        if (head == null || head.next == null) 
        {
            return;
        }
        Node slow = head, fast = head;
        while (fast != null && fast.next != null) 
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        Node prev = null, curr = slow, next;
        while (curr != null) 
        {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        Node first = head, second = prev;
        while (second.next != null) 
        {
            Node temp1 = first.next;
            Node temp2 = second.next;
            first.next = second;
            second.next = temp1;
            first = temp1;
            second = temp2;
        }
    }
    public static void print(Node head) 
    {
        while (head != null) 
        {
            System.out.print(head.val + " ");
            head = head.next;
        }
        System.out.println();
    }
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        Node dummy = new Node(0);
        Node current = dummy;
        while (sc.hasNextInt()) 
        {
            int value = sc.nextInt();
            if (value == -1) 
            {
                break;
            }
            current.next = new Node(value);
            current = current.next;
        }
        Node head = dummy.next;
        reorder(head);
        print(head);
    }
}

