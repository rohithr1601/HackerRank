You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.
We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.
Input Format

First line row value
Second line column value
From third line matrix input
Then N value
Then K vlaue
Constraints

1 <= k <= n <= 100
1 <= times.length <= 6000
times[i].length == 3
1 <= ui, vi <= n
ui != vi
0 <= wi <= 100
All the pairs (ui, vi) are unique. (i.e., no multiple edges.)
Output Format

Return the minimum time it takes for all the n nodes to receive the signal.
Sample Input 0

3
3
2 1 2
2 3 1
3 4 1
4
2
Sample Output 0

2
Sample Input 1

1
3
1 2 1
2
1
Sample Output 1

1

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


import java.io.*;
import java.util.*;

public class Solution {
    static class Edge {
        int target, weight;
        Edge(int target, int weight) {
            this.target = target;
            this.weight = weight;
        }
    }

    public static int networkDelayTime(int[][] times, int n, int k) {
        Map<Integer, List<Edge>> graph = new HashMap<>();
        for (int i = 1; i <= n; i++) {
            graph.put(i, new ArrayList<>());
        }
        for (int[] time : times) {
            graph.get(time[0]).add(new Edge(time[1], time[2]));
        }

        int[] dist = new int[n + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[k] = 0;

        PriorityQueue<int[]> heap = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
        heap.add(new int[]{k, 0});

        while (!heap.isEmpty()) {
            int[] info = heap.poll();
            int node = info[0], time = info[1];
            if (time > dist[node]) continue;
            for (Edge edge : graph.get(node)) {
                int newDist = time + edge.weight;
                if (newDist < dist[edge.target]) {
                    dist[edge.target] = newDist;
                    heap.add(new int[]{edge.target, newDist});
                }
            }
        }

        int maxTime = 0;
        for (int i = 1; i <= n; i++) {
            if (dist[i] == Integer.MAX_VALUE) return -1;
            maxTime = Math.max(maxTime, dist[i]);
        }
        return maxTime;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int rows = scanner.nextInt();
        int columns = scanner.nextInt();
        int[][] times = new int[rows][columns];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                times[i][j] = scanner.nextInt();
            }
        }

        int n = scanner.nextInt();
        int k = scanner.nextInt();

        System.out.println(networkDelayTime(times, n, k));
    }
}
