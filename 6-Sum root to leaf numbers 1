You are given the root of a binary tree containing digits from 0 to 9 only.
Each root-to-leaf path in the tree represents a number.
For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.
A leaf node is a node with no children.
Input Format

The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
Constraints

Time:- 1Sec
Output Format

Return the total sum of all root-to-leaf numbers.
Sample Input 0

1 2 3 -1 -1 -1 -1
Sample Output 0

25
Explanation 0

Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
Sample Input 1

4 9 0 5 1 -1 -1 -1 -1 -1 -1
Sample Output 1

1026
Explanation 1

Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
public class Solution {
    
    static class Node {
        int val;
        Node left, right;
        Node(int val) {
            this.val = val;
        }
    }
    
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        String[] input = sc.nextLine().split(" ");
        List<Integer> data = new ArrayList<>();
        for (String s : input) {
            if (!s.equals("-1")) data.add(Integer.parseInt(s));
        }
        Node root = buildTree(data);
        int sum = sumNumbers(root, 0);
        System.out.println(sum);
        sc.close();
    }
    
    private static Node buildTree(List<Integer> data) {
        if (data.isEmpty()) return null;
        Queue<Node> q = new LinkedList<>();
        Node root = new Node(data.get(0));
        q.add(root);
        int i = 1;
        while (!q.isEmpty() && i < data.size()) {
            Node node = q.poll();
            if (i < data.size()) {
                if (data.get(i) != -1) {
                    node.left = new Node(data.get(i));
                    q.add(node.left);
                }
                i++;
            }
            if (i < data.size()) {
                if (data.get(i) != -1) {
                    node.right = new Node(data.get(i));
                    q.add(node.right);
                }
                i++;
            }
        }
        return root;
    }
    
    private static int sumNumbers(Node node, int current) {
        if (node == null) return 0;
        current = current * 10 + node.val;
        if (node.left == null && node.right == null) return current;
        return sumNumbers(node.left, current) + sumNumbers(node.right, current);
    }
}
